ðŸ“‚ Task 4: SQL for Data Analysis
âœ… Objective

Use SQL queries to extract and analyze data from an e-commerce database.

ðŸ›  Tools

Database: MySQL / PostgreSQL / SQLite

Dataset: Ecommerce_SQL_Database (or any e-commerce dataset with Users, Orders, Products, Payments tables)

ðŸ“‘ Deliverables
1. SQL Queries 

Sample queries you can include:

-- a. Select with WHERE and ORDER BY
SELECT user_id, order_id, order_date, total_amount
FROM orders
WHERE total_amount > 500
ORDER BY order_date DESC;

-- b. GROUP BY with aggregate function
SELECT product_id, COUNT(order_id) AS total_orders, SUM(quantity) AS total_quantity
FROM order_items
GROUP BY product_id
ORDER BY total_orders DESC;

-- c. INNER JOIN
SELECT u.user_id, u.name, o.order_id, o.total_amount
FROM users u
INNER JOIN orders o ON u.user_id = o.user_id;

-- d. LEFT JOIN to find users with/without orders
SELECT u.user_id, u.name, o.order_id
FROM users u
LEFT JOIN orders o ON u.user_id = o.user_id;

-- e. Subquery (users who spent above average)
SELECT user_id, SUM(total_amount) AS total_spent
FROM orders
GROUP BY user_id
HAVING SUM(total_amount) > (
    SELECT AVG(total_amount)
    FROM orders
);

-- f. Average revenue per user
SELECT ROUND(SUM(total_amount) / COUNT(DISTINCT user_id), 2) AS avg_revenue_per_user
FROM orders;

-- g. Create a view
CREATE VIEW top_customers AS
SELECT user_id, SUM(total_amount) AS total_spent
FROM orders
GROUP BY user_id
ORDER BY total_spent DESC
LIMIT 10;

-- h. Index for optimization
CREATE INDEX idx_user_id ON orders(user_id);
